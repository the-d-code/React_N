Question 1: Create a Dynamic Quiz Application
Design and implement a dynamic quiz application using HTML, CSS, and JavaScript. The application
should have the following features:
1. Display a question and multiple choice options on the webpage.
2. Allow the user to select one option as their answer.
3. Provide immediate feedback to the user on whether their answer is correct or incorrect.
4. Keep track of the user's score as they progress through the quiz.
5. Present the next question once the user submits their answer.
6. Display the final score and a message at the end of the quiz.
Consider using the following structure for your code:
HTML: Create the necessary elements to display the question, options, feedback, score, and end
message.
CSS: Style the webpage to make it visually appealing.
JavaScript: Implement the logic for displaying questions, validating answers, calculating the
score, and transitioning between questions.
Feel free to customize the quiz content and design according to your preferences. Remember to use
appropriate HTML tags, CSS properties, and JavaScript functions to achieve the desired functionality.
 
Html file
<!DOCTYPE html>
<html>
<head>
  <title>General Knowledge Quiz</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="container">
    <h1>General Knowledge Quiz</h1>
    <div id="question-container">
      <p id="question-text"></p>
    </div>
    <div id="options-container">
      <!-- Radio buttons will be populated dynamically using JavaScript -->
    </div>
    <button id="submit-btn">Submit</button>
    <div id="feedback-container">
      <p id="feedback-text"></p>
    </div>
    <div id="score-container">
      <p>Score: <span id="score">0</span></p>
    </div>
    <div id="end-message" style="display: none;">
      <p>Quiz Completed!</p>
      <p>Your final score is: <span id="final-score">0</span></p>
    </div>
  </div>
  <script src="script.js"></script>
</body>
</html>
 
 
Css file
body {
    font-family: Arial, sans-serif;
    text-align: center;
    margin: 0;
    padding: 0;
    background-color: #f8f8f8;
  }
 
  .container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
 
  h1 {
    margin-bottom: 20px;
    color: #333;
  }
 
  #question-container {
    margin-bottom: 20px;
  }
 
  #options-container {
    text-align: left;
    margin-bottom: 20px;
  }
 
  #feedback-container {
    margin-bottom: 20px;
    font-weight: bold;
  }
 
  #score-container {
    font-weight: bold;
  }
 
  #submit-btn {
    cursor: pointer;
    background-color: #007bff;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    transition: background-color 0.2s;
  }
 
  #submit-btn:hover {
    background-color: #0056b3;
  }
 
  #end-message {
    margin-top: 20px;
    display: none;
  }
 
  body {
    font-family: Arial, sans-serif;
    text-align: center;
    margin: 0;
    padding: 0;
    background-color: #000000cf;
  }
 
  .container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
    background-color: #fffdfd;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
 
  h1 {
    margin-bottom: 20px;
    color: #333;
  }
 
  #question-container {
    margin-bottom: 20px;
  }
 
  #options-container {
    text-align: left;
    margin-bottom: 20px;
  }
 
  #feedback-container {
    margin-bottom: 20px;
    font-weight: bold;
  }
 
  #score-container {
    font-weight: bold;
  }
 
  #submit-btn {
    cursor: pointer;
    background-color: #007bff;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    transition: background-color 0.2s;
  }
 
  #submit-btn:hover {
    background-color: #0056b3;
  }
 
  .option {
    margin-bottom: 10px;
    cursor: pointer;
    background-color: #f0f0f0;
    border-radius: 4px;
    padding: 10px;
    transition: background-color 0.2s;
  }
 
  .option:hover {
    background-color: #e0e0e0;
  }
 
  @media only screen and (max-width: 600px) {
    .container {
      padding: 10px;
    }
  }
Java script file
 
const quizData = [
    {
      question: "1. What is the capital of France?",
      options: ["Paris", "Berlin", "London", "Rome"],
      answer: "Paris"
    },
    {
      question: "2. What is the largest planet in our solar system?",
      options: ["Mars", "Jupiter", "Saturn", "Neptune"],
      answer: "Jupiter"
    },
    {
        question: "3. What is the capital of Japan?",
        options: ["Tokyo", "Seoul", "Beijing", "Bangkok"],
        answer: "Tokyo"
      },
      {
        question: "4. Who painted the Mona Lisa?",
        options: ["Leonardo da Vinci", "Vincent van Gogh", "Pablo Picasso", "Michelangelo"],
        answer: "Leonardo da Vinci"
      },
      {
        question: "5. What is the chemical symbol for water?",
        options: ["H2O", "CO2", "N2O", "CH4"],
        answer: "H2O"
      },
  ];
 
  let currentQuestion = 0;
  let score = 0;
  const totalQuestions = quizData.length;
 
  const questionTextElement = document.getElementById("question-text");
  const optionsContainer = document.getElementById("options-container");
  const feedbackTextElement = document.getElementById("feedback-text");
  const scoreElement = document.getElementById("score");
  const submitButton = document.getElementById("submit-btn");
  const endMessage = document.getElementById("end-message");
  const finalScoreElement = document.getElementById("final-score");
 
  function showQuestion() {
    if (currentQuestion < totalQuestions) {
      const currentQuizData = quizData[currentQuestion];
      questionTextElement.textContent = currentQuizData.question;
      optionsContainer.innerHTML = "";
 
      currentQuizData.options.forEach((option, index) => {
        const optionElement = document.createElement("div");
        optionElement.classList.add("option");
        optionElement.innerHTML = `
          <input type="radio" name="option" id="option${index}" value="${option}">
          <label for="option${index}">${option}</label>
        `;
        optionsContainer.appendChild(optionElement);
      });
    } else {
      showResult();
    }
  }
 
  function checkAnswer() {
    const selectedOption = document.querySelector('input[name="option"]:checked');
    if (!selectedOption) {
      return;
    }
 
    const selectedValue = selectedOption.value;
    const currentQuizData = quizData[currentQuestion];
 
    if (selectedValue === currentQuizData.answer) {
      score++;
      feedbackTextElement.textContent = "Correct!";
    } else {
      feedbackTextElement.textContent = "Incorrect!";
    }
 
    scoreElement.textContent = score;
    currentQuestion++;
    showQuestion();
  }
 
  function showResult() {
    questionTextElement.textContent = "";
    optionsContainer.innerHTML = "";
    submitButton.style.display = "none";
    endMessage.style.display = "block";
    finalScoreElement.textContent = score;
  }
 
  submitButton.addEventListener("click", checkAnswer);
 
  showQuestion();
 
 
Question 2: Create a ToDo List Application
Design and implement a ToDo list application using HTML, CSS, and JavaScript. The application should
have the following features:
1. Display an input field and a "Add" button to add new tasks.
2. When the user clicks the "Add" button, the task should be added to the list below.
3. Each task should have a checkbox to mark it as completed and a delete button to remove it from
the list.
4. Styling the list to differentiate between completed and pending tasks.
5. Display a counter that shows the total number of pending tasks.
6. Optional: Implement a feature to edit existing tasks.
Consider using the following structure for your code:
HTML: Create the necessary elements to display the input field, buttons, task list, and counter.
CSS: Style the webpage and list items to make them visually appealing and distinguish between
completed and pending tasks.
JavaScript: Implement the logic for adding tasks, marking them as completed, deleting tasks,
updating the counter, and handling any additional features you choose to implement.
 
<!DOCTYPE html>
<html>
<head>
 <title>ToDo List</title>
 <style>
   body {
     font-family: Arial, sans-serif;
     margin: 0;
     padding: 0;
     background-color: #f4f4f4;
   }
 
   .container {
     max-width: 400px;
     margin: 20px auto;
     background-color: #fff;
     padding: 20px;
     box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
   }
 
   h1 {
     text-align: center;
     color: #333;
   }
 
   input[type="text"] {
     width: 100%;
     padding: 10px;
     box-sizing: border-box;
     border: 1px solid #ccc;
     border-radius: 5px;
     margin-bottom: 10px;
     font-size: 16px;
   }
 
   button {
     background-color: #4CAF50;
     color: #fff;
     padding: 10px 15px;
     border: none;
     border-radius: 5px;
     cursor: pointer;
     font-size: 16px;
   }
 
   button:hover {
     background-color: #45a049;
   }
 
   ul {
     list-style: none;
     padding: 0;
     margin: 0;
   }
 
   li {
     display: flex;
     justify-content: space-between;
     align-items: center;
     padding: 10px;
     background-color: #f9f9f9;
     border-bottom: 1px solid #ccc;
     font-size: 16px;
   }
 
   .completed-task {
     color: #888;
     text-decoration: line-through;
   }
 
   .delete-btn {
     background-color: #f44336;
   }
 
   .delete-btn:hover {
     background-color: #d32f2f;
   }
 
   .pending-counter {
     text-align: center;
     font-size: 18px;
     margin-bottom: 10px;
   }
 </style>
</head>
<body>
 <div class="container">
   <h1>ToDo List</h1>
   <input type="text" id="taskInput" placeholder="Enter a new task">
   <button onclick="addTask()">Add</button>
   <p class="pending-counter">Pending tasks: <span id="pendingCounter">0</span></p>
   <ul id="taskList">
     <!-- Tasks will be added here -->
   </ul>
 </div>
 
 <script>
   let tasks = [];
 
   function addTask() {
     const taskInput = document.getElementById('taskInput');
     const taskText = taskInput.value.trim();
     if (taskText === '') return;
 
     const task = {
       id: new Date().getTime(),
       text: taskText,
       completed: false,
     };
 
     tasks.push(task);
     taskInput.value = '';
     renderTasks();
   }
 
   function deleteTask(taskId) {
     tasks = tasks.filter(task => task.id !== taskId);
     renderTasks();
   }
 
   function toggleCompleted(taskId) {
     tasks = tasks.map(task => {
       if (task.id === taskId) {
         task.completed = !task.completed;
       }
       return task;
     });
     renderTasks();
   }
 
   function renderTasks() {
     const taskList = document.getElementById('taskList');
     taskList.innerHTML = '';
 
     tasks.forEach(task => {
       const listItem = document.createElement('li');
       listItem.innerHTML = `
         <span class="${task.completed ? 'completed-task' : ''}">${task.text}</span>
         <div>
           <input type="checkbox" ${task.completed ? 'checked' : ''} onclick="toggleCompleted(${task.id})">
           <button class="delete-btn" onclick="deleteTask(${task.id})">Delete</button>
         </div>
       `;
 
       taskList.appendChild(listItem);
     });
 
     updatePendingCounter();
   }
 
   function updatePendingCounter() {
     const pendingCounter = document.getElementById('pendingCounter');
     const pendingTasks = tasks.filter(task => !task.completed).length;
     pendingCounter.innerText = pendingTasks;
   }
 
   // Optional: Edit existing tasks (double click on the task text)
   function editTask(taskId) {
     const newText = prompt('Edit task:', tasks.find(task => task.id === taskId).text);
     if (newText !== null) {
       tasks = tasks.map(task => {
         if (task.id === taskId) {
           task.text = newText.trim();
         }
         return task;
       });
       renderTasks();
     }
   }
 
   // Initialize the app by rendering initial tasks
   renderTasks();
 </script>
</body>
</html>
Question 3: Create small website and perform JavaScript for the following.
Q. 1: Create a small website with a button labeled "Generate Random Number". When the button is
clicked, display a random number between 1 and 100 in an alert message.
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Random Number Generator</title>
   <style>
       body {
           display: flex;
           justify-content: center;
           align-items: center;
           height: 100vh;
           margin: 0;
           font-family: Arial, sans-serif;
           background-color: #f0f0f0;
       }
 
       button {
           padding: 12px 20px;
           font-size: 16px;
           cursor: pointer;
           background-color: #4CAF50;
           color: white;
           border: none;
           border-radius: 4px;
           box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
           transition: background-color 0.2s ease;
       }
 
       button:hover {
           background-color: #45a049;
       }
 
       button:focus {
           outline: none;
       }
   </style>
</head>
<body>
   <button id="generateButton">Generate Random Number</button>
 
   <script>
       // Function to generate a random number between min and max (inclusive)
       function getRandomNumber(min, max) {
           return Math.floor(Math.random() * (max - min + 1)) + min;
       }
 
       // Function to handle button click event
       function generateRandomNumber() {
           const randomNumber = getRandomNumber(1, 100);
           alert(`Random Number: ${randomNumber}`);
       }
 
       // Add click event listener to the button
       document.getElementById("generateButton").addEventListener("click", generateRandomNumber);
   </script>
</body>
</html>
Q. 2: Create a form with an input field where users can enter their email address. Add a button that,
when clicked, checks if the entered email address is valid (contains the '@' symbol). If it is valid, display
an alert message saying "Email address is valid". Otherwise, display an alert message saying "Invalid
email address".
<!DOCTYPE html>
<html>
<head>
  <title>Email Validation Form</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f2f2f2;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
 
    .container {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
 
    .form-group {
      margin-bottom: 20px;
    }
 
    label {
      display: block;
      font-size: 16px;
      margin-bottom: 5px;
    }
 
    input[type="email"] {
      width: 100%;
      padding: 10px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
 
    button {
      background-color: #007BFF;
      color: #fff;
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
 
    button:hover {
      background-color: #0056b3;
    }
  </style>
</head>
<body>
 
  <form id="emailForm">
    <label for="email">Enter your email address:</label>
    <input type="email" id="email" name="email" required>
   
    <button type="button" onclick="checkEmailValidity()">Check Email</button>
  </form>
 
  <script>
    function checkEmailValidity() {
      // Get the input value from the email field
      const emailInput = document.getElementById('email').value.trim();
 
      // Regular expression to check if the email address is valid
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
 
      if (emailRegex.test(emailInput)) {
        // Email is valid
        alert('Email address is valid.');
      } else {
        // Invalid email
        alert('Invalid email address.');
      }
    }
  </script>
 
</body>
</html>
 
Q. 3: Create a simple image slideshow. Display three images on the webpage, and add two buttons
labeled "Previous" and "Next". When the "Previous" button is clicked, display the previous image in the
sequence, and when the "Next" button is clicked, display the next image in the sequence.
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Simple Image Slideshow</title>
    <style>
        body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}
 
.slideshow-container {
    position: relative;
    max-width: 500px;
    margin: 0 auto;
}
 
.slide {
    display: none;
    width: 100%;
    height: auto;
}
 
.prev, .next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    padding: 10px 20px;
    font-size: 18px;
    background-color: #333;
    color: #fff;
    border: none;
    cursor: pointer;
}
 
.prev {
    left: 0;
}
 
.next {
    right: 0;
}
 
    </style>
</head>
<body>
    <div class="slideshow-container">
        <img class="slide" src="image1.jpg">
        <img class="slide" src="image2.jpg">
        <img class="slide" src="image3.jpg">
        <button class="prev" onclick="changeSlide(-1)">Previous</button>
        <button class="next" onclick="changeSlide(1)">Next</button>
    </div>
 
    <script>
        let slideIndex = 0;
const slides = document.getElementsByClassName("slide");
 
showSlide(slideIndex);
 
function changeSlide(n) {
    showSlide(slideIndex += n);
}
 
function showSlide(index) {
    if (index < 0) {
        slideIndex = slides.length - 1;
    } else if (index >= slides.length) {
        slideIndex = 0;
    }
 
    for (let i = 0; i < slides.length; i++) {
        slides[i].style.display = "none";
    }
 
    slides[slideIndex].style.display = "block";
}
 
    </script>
</body>
</html>
 
Q. 4: Create a small calculator with an input field and three buttons labeled "Square", "Square Root",
and "Factorial". When the user enters a number and clicks one of the buttons, perform the
corresponding operation on the entered number and display the result in an alert message.
<!DOCTYPE html>
<html>
<head>
    <title>Simple Calculator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 20px;
        }
        input[type="number"] {
            padding: 5px;
            width: 200px;
            margin: 10px;
        }
        button {
            padding: 10px;
            margin: 5px;
            cursor: pointer;
        }
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 20px;
            background-color: #f5f5f5;
        }
        h1 {
            color: #333;
        }
        input[type="number"] {
            padding: 10px;
            width: 200px;
            margin: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        button {
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            background-color: #4CAF50;
            color: #fff;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #45a049;
        }
    </style>
 
</head>
<body>
    <h1>Simple Calculator</h1>
    <input type="number" id="numberInput" placeholder="Enter a number">
    <br>
    <button onclick="calculate('square')">Square</button>
    <button onclick="calculate('squareRoot')">Square Root</button>
    <button onclick="calculate('factorial')">Factorial</button>
 
    <script>
        function calculate(operation) {
            const numberInput = document.getElementById('numberInput').value;
 
            if (numberInput === "") {
                alert("Please enter a number.");
                return;
            }
 
            const number = parseFloat(numberInput);
            let result;
 
            switch (operation) {
                case 'square':
                    result = number * number;
                    break;
                case 'squareRoot':
                    result = Math.sqrt(number);
                    break;
                case 'factorial':
                    result = factorial(number);
                    break;
                default:
                    return;
            }
 
            alert(`Result: ${result}`);
        }
 
        function factorial(num) {
            if (num === 0 || num === 1)
                return 1;
 
            for (let i = num - 1; i >= 1; i--) {
                num *= i;
            }
 
            return num;
        }
    </script>
</body>
</html>
 
Q. 5: Create a dropdown menu with three options: "Red", "Green", and "Blue". When an option is
selected, change the background color of the webpage to the corresponding selected color.
<!DOCTYPE html>
<html>
<head>
 <title>Color Changer</title>
 <style>
   body {
     font-family: Arial, sans-serif;
     text-align: center;
     background-color: #f2f2f2;
     margin: 0;
     padding: 0;
   }
 
   h1 {
     margin-top: 30px;
     color: #333;
   }
 
   select {
     margin-top: 10px;
     font-size: 16px;
     padding: 8px 12px;
     border: 2px solid #ccc;
     border-radius: 5px;
     background-color: #fff;
     color: #333;
     cursor: pointer;
   }
 
   select:hover {
     border-color: #999;
   }
 
   select:focus {
     outline: none;
     border-color: #555;
   }
 </style>
</head>
<body>
 <h1>Select a Color:</h1>
 <select id="colorDropdown" onchange="changeBackgroundColor()">
   <option value="red">Red</option>
   <option value="green">Green</option>
   <option value="blue">Blue</option>
 </select>
 
 <script>
   function changeBackgroundColor() {
     var selectedColor = document.getElementById("colorDropdown").value;
     document.body.style.backgroundColor = selectedColor;
   }
 </script>
</body>
</html>
Q. 6: Create a stopwatch functionality. Display a timer on the webpage that starts at 00:00:00. Add
buttons labeled "Start", "Stop", and "Reset". When the "Start" button is clicked, start the timer. When
the "Stop" button is clicked, pause the timer. When the "Reset" button is clicked, reset the timer to
00:00:00.
<!DOCTYPE html>
<html>
<head>
 <title>Stopwatch</title>
 <style>
   body {
     font-family: Arial, sans-serif;
     text-align: center;
   }
 
   #timer {
     font-size: 32px;
     margin-top: 30px;
   }
 
   #buttons {
     margin-top: 20px;
   }
 
   button {
     font-size: 16px;
     padding: 8px 12px;
     margin: 5px;
     cursor: pointer;
   }
 </style>
</head>
<body>
 <h1>Stopwatch</h1>
 <div id="timer">00:00:00</div>
 <div id="buttons">
   <button onclick="startTimer()">Start</button>
   <button onclick="stopTimer()">Stop</button>
   <button onclick="resetTimer()">Reset</button>
 </div>
 
 <script>
   let intervalId;
   let startTime = 0;
 
   function startTimer() {
     if (intervalId) return; // Timer is already running
     startTime = Date.now();
     intervalId = setInterval(updateTimer, 10); // Update every 10 milliseconds
   }
 
   function stopTimer() {
     clearInterval(intervalId);
     intervalId = null;
   }
 
   function resetTimer() {
     stopTimer();
     startTime = 0;
     updateTimerDisplay();
   }
 
   function updateTimer() {
     const currentTime = Date.now() - startTime;
     updateTimerDisplay(currentTime);
   }
 
   function updateTimerDisplay(time = 0) {
     const milliseconds = String(time % 1000).slice(0, 2).padStart(2, '0');
     const seconds = String(Math.floor(time / 1000) % 60).padStart(2, '0');
     const minutes = String(Math.floor(time / 60000) % 60).padStart(2, '0');
     const hours = String(Math.floor(time / 3600000) % 60).padStart(2, '0');
     document.getElementById('timer').textContent = `${hours}:${minutes}:${seconds}.${milliseconds}`;
   }
 </script>
</body>
</html>
Q.7: Create an image gallery with three images. When an image is clicked, display the image in a larger size in a modal window.
<!DOCTYPE html>
<html>
<head>
 <title>Image Gallery</title>
 <style>
   body {
     font-family: Arial, sans-serif;
     text-align: center;
   }
 
   .gallery {
     display: flex;
     justify-content: center;
     margin-top: 30px;
   }
 
   .gallery img {
     width: 150px;
     height: 150px;
     margin: 5px;
     cursor: pointer;
   }
 
   #modal {
     display: none;
     position: fixed;
     top: 0;
     left: 0;
     width: 100%;
     height: 100%;
     background-color: rgba(0, 0, 0, 0.7);
   }
 
   #modal-content {
     display: block;
     max-width: 80%;
     max-height: 80%;
     margin: 10% auto;
   }
 
   #modal img {
     width: 100%;
     height: auto;
   }
 </style>
</head>
<body>
 <h1>Image Gallery</h1>
 <div class="gallery">
   <img src="image1.jpg" onclick="openModal('image1.jpg')" alt="Image 1">
   <img src="image2.jpg" onclick="openModal('image2.jpg')" alt="Image 2">
   <img src="image3.jpg" onclick="openModal('image3.jpg')" alt="Image 3">
 </div>
 
 <div id="modal">
   <span id="modal-content">
     <img id="modal-image" src="" alt="">
   </span>
 </div>
 
 <script>
   function openModal(imageSrc) {
     const modal = document.getElementById('modal');
     const modalImage = document.getElementById('modal-image');
     modalImage.src = imageSrc;
     modal.style.display = 'block';
   }
 
   document.getElementById('modal').addEventListener('click', function (event) {
     if (event.target === this) {
       closeModal();
     }
   });
 
   function closeModal() {
     const modal = document.getElementById('modal');
     modal.style.display = 'none';
   }
 </script>
</body>
</html>
Q.8: Create a small calculator with two input fields and four buttons: "Add", "Subtract", "Multiply", and
"Divide". When a button is clicked, perform the corresponding mathematical operation on the two input
values and display the result in an alert message.
<!DOCTYPE html>
<html>
<head>
 <title>Simple Calculator</title>
 <style>
   body {
     font-family: Arial, sans-serif;
     text-align: center;
     background-color: #f2f2f2;
   }
 
   h1 {
     margin-top: 30px;
     color: #333;
   }
 
   input[type="number"] {
     font-size: 16px;
     padding: 8px;
     border: 1px solid #ccc;
     border-radius: 5px;
     margin: 5px;
     width: 150px;
   }
 
   .calculator-buttons {
     display: flex;
     justify-content: center;
     margin-top: 20px;
   }
 
   button {
     font-size: 16px;
     padding: 10px 20px;
     margin: 5px;
     border: none;
     border-radius: 5px;
     background-color: #007bff;
     color: #fff;
     cursor: pointer;
   }
 
   button:hover {
     background-color: #0056b3;
   }
 
   button:focus {
     outline: none;
   }
 </style>
</head>
<body>
 <h1>Simple Calculator</h1>
 <input type="number" id="num1" placeholder="Enter a number">
 <input type="number" id="num2" placeholder="Enter another number">
 <div class="calculator-buttons">
   <button onclick="calculate('add')">Add</button>
   <button onclick="calculate('subtract')">Subtract</button>
   <button onclick="calculate('multiply')">Multiply</button>
   <button onclick="calculate('divide')">Divide</button>
 </div>
 
 <script>
   function calculate(operation) {
     const num1 = parseFloat(document.getElementById('num1').value);
     const num2 = parseFloat(document.getElementById('num2').value);
     let result;
 
     switch (operation) {
       case 'add':
         result = num1 + num2;
         break;
       case 'subtract':
         result = num1 - num2;
         break;
       case 'multiply':
         result = num1 * num2;
         break;
       case 'divide':
         if (num2 === 0) {
           alert("Error: Cannot divide by zero!");
           return;
         }
         result = num1 / num2;
         break;
       default:
         alert("Invalid operation");
         return;
     }
 
     alert("Result: " + result);
   }
 </script>
</body>
</html>
Q.9: Create a countdown timer that starts at 10 and counts down to 0. Display the current countdown
value on the webpage. When the countdown reaches 0, display an alert message saying "Time's up!".
<!DOCTYPE html>
<html>
<head>
 <title>Countdown Timer</title>
 <style>
   body {
     font-family: Arial, sans-serif;
     text-align: center;
   }
 
   #countdown {
     font-size: 48px;
     margin-top: 50px;
   }
 </style>
</head>
<body>
 <h1>Countdown Timer</h1>
 <div id="countdown">10</div>
 
 <script>
   let countdownValue = 10;
   let countdownInterval;
 
   function startCountdown() {
     if (countdownValue <= 0) {
       return;
     }
 
     countdownInterval = setInterval(function () {
       countdownValue--;
       document.getElementById('countdown').textContent = countdownValue;
 
       if (countdownValue === 0) {
         clearInterval(countdownInterval);
         alert("Time's up!");
       }
     }, 1000); // Update every 1000 milliseconds (1 second)
   }
 
   startCountdown();
 </script>
</body>
</html>
Q.10: Create a form with two input fields: "Username" and "Password". Add a button that, when
clicked, checks if the username is "admin" and the password is "password". If both conditions are true,
display an alert message saying "Login Successful". Otherwise, display an alert message saying "Login
Failed".
Default initializes default value to constructor.
<!DOCTYPE html>
<html>
<head>
 <title>Login Form</title>
 <style>
   body {
     font-family: Arial, sans-serif;
     text-align: center;
     background-color: #f2f2f2;
     margin: 0;
     padding: 0;
   }
 
   h1 {
     margin-top: 30px;
     color: #333;
   }
 
   form {
     display: flex;
     flex-direction: column;
     align-items: center;
     margin-top: 50px;
   }
 
   label {
     font-size: 18px;
     margin-bottom: 5px;
   }
 
   input[type="text"],
   input[type="password"] {
     font-size: 16px;
     padding: 8px;
     border: 1px solid #ccc;
     border-radius: 5px;
     margin-bottom: 15px;
     width: 250px;
   }
 
   button {
     font-size: 18px;
     padding: 10px 20px;
     border: none;
     border-radius: 5px;
     background-color: #007bff;
     color: #fff;
     cursor: pointer;
   }
 
   button:hover {
     background-color: #0056b3;
   }
 
   button:focus {
     outline: none;
   }
 </style>
</head>
<body>
 <h1>Login Form</h1>
 <form>
   <label for="username">Username:</label>
   <input type="text" id="username" value="admin" required>
   <br>
   <label for="password">Password:</label>
   <input type="password" id="password" value="password" required>
   <br>
   <button type="button" onclick="checkLogin()">Login</button>
 </form>
 
 <script>
   function checkLogin() {
     const usernameInput = document.getElementById("username");
     const passwordInput = document.getElementById("password");
     const username = usernameInput.value;
     const password = passwordInput.value;
 
     if (username === "admin" && password === "password") {
       alert("Login Successful");
     } else {
       alert("Login Failed");
     }
   }
 </script>
</body>
</html>
